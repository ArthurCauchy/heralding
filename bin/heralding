#!/usr/bin/env python
# Copyright (C) 2013 Johnny Vestergaard <jkv@unixcluster.dk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import gevent
import gevent.monkey

gevent.monkey.patch_all()

import logging
import logging.handlers
import json
from argparse import ArgumentParser
import sys
import os

from gevent import Greenlet

import heralding
import heralding.honeypot
from heralding.helpers.asciify import asciify


logger = logging.getLogger()


def stop_if_root():
    if os.getuid() == 0:
        logger.error('Beeswarm should not be started in this mode as root, please restart as a normal user.')
        sys.exit(1)


def setup_logging(logfile, verbose):
    """
        Sets up logging to the logfiles/console.
    :param logfile: Path of the file to write logs to.
    :param verbose: If True, enables verbose logging.
    """
    root_logger = logging.getLogger()

    default_formatter = logging.Formatter('%(asctime)-15s (%(name)s) %(message)s')

    if verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO
    root_logger.setLevel(loglevel)

    console_log = logging.StreamHandler()
    console_log.addFilter(LogFilter())
    console_log.setLevel(loglevel)
    console_log.setFormatter(default_formatter)
    root_logger.addHandler(console_log)

    if logfile in ('/dev/log', '/dev/syslog', '/var/run/syslog', '/var/run/log'):
        file_log = logging.handlers.SysLogHandler(address=logfile, facility='local1')
        syslog_formatter = logging.Formatter('heralding[%(process)d]: %(message)s')
        file_log.setFormatter(syslog_formatter)
    else:
        file_log = logging.FileHandler(logfile)
        file_log.setFormatter(default_formatter)
    file_log.setLevel(loglevel)
    root_logger.addHandler(file_log)


class LogFilter(logging.Filter):
    def filter(self, rec):
        if rec.name == 'paramiko.transport':
            return False
        else:
            return True


if __name__ == '__main__':
    parser = ArgumentParser(description='Heralding')

    group = parser.add_argument_group()
    group.add_argument('-se', '--server', action='store_true', help='Starts heralding in server mode.')

    '''
    parser.add_argument('--config', dest='configurl', default='', help='Configuration URL to the server service.')
    parser.add_argument('--waitingdrone', action='store_true', default=False, help='Waiting drone mode - expert mode!')
    parser.add_argument('--local_socket', dest='local_socket', default=None)
    parser.add_argument('--max_sessions', dest='max_sessions', type=int, default=None,
                        help='Maximum number of sessions to store.')
    parser.add_argument('--customize', action='store_true', default=False,
                        help='Asks for specific network and certificate information on the first run.')
    parser.add_argument('--clearsessions', action='store_true', default=False,
                        help='Deletes all sessions on startup.')
    parser.add_argument('--resetpw', action='store_true', default=False,
                        help='Deletes all sessions on startup.')
    parser.add_argument('--no_webui', action='store_true', default=False,
                        help='Do not start the web ui.')
    '''
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='Logs debug messages.')
    parser.add_argument('--workdir', dest='workdir', default=os.getcwd())
    parser.add_argument('-l', '--logfile', dest='logfile', default='heralding.log', help='Heralding log file')
    args = parser.parse_args()

    if not os.path.isabs(args.logfile):
        args.logfile = os.path.join(args.workdir, args.logfile)
    setup_logging(args.logfile, args.verbose)

    logger.info('Initializing Heralding version {0}'.format(heralding.version))

    config_file = os.path.join(args.workdir, 'heralding.cfg')

    # TODO: Reimplement config stuff
    with open(config_file, "r") as _file:
        config = json.loads(_file.read(), object_hook=asciify)

    honeypot = heralding.honeypot.Honeypot(config, args.workdir)
    drone_greenlet = Greenlet.spawn(honeypot.start)
    gevent.wait([drone_greenlet,])